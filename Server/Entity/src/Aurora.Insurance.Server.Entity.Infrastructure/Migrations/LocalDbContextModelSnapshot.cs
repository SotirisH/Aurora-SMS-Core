// <auto-generated />
using System;
using Aurora.Insurance.Server.Entity.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Aurora.Insurance.Server.Entity.Infrastructure.Migrations
{
    [DbContext(typeof(LocalDbContext))]
    partial class LocalDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.11")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Aurora.Insurance.Server.Entity.Domain.Models.Entities.Address", b =>
                {
                    b.Property<Guid>("AddressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AddressLine")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid>("ContactId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CountryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ZipCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("AddressId");

                    b.HasIndex("ContactId")
                        .IsUnique();

                    b.ToTable("Address");
                });

            modelBuilder.Entity("Aurora.Insurance.Server.Entity.Domain.Models.Entities.Contact", b =>
                {
                    b.Property<Guid>("ContactId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FatherName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("OrganizationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("TaxId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ContactId");

                    b.HasIndex("OrganizationId");

                    b.ToTable("Contact");
                });

            modelBuilder.Entity("Aurora.Insurance.Server.Entity.Domain.Models.Entities.DrivingLicence", b =>
                {
                    b.Property<Guid>("DrivingLicenceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Conditions")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<Guid>("ContactId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CountryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ExpireDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("IssueDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Version")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("DrivingLicenceId");

                    b.ToTable("DrivingLicence");
                });

            modelBuilder.Entity("Aurora.Insurance.Server.Entity.Domain.Models.Entities.Organization", b =>
                {
                    b.Property<Guid>("OrganizationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BrokerId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("OrganizationId");

                    b.ToTable("Organization");
                });

            modelBuilder.Entity("Aurora.Insurance.Server.Entity.Domain.Models.Entities.Phone", b =>
                {
                    b.Property<Guid>("PhoneId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ContactId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("PhoneType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PhoneId");

                    b.HasIndex("ContactId");

                    b.ToTable("Phone");
                });

            modelBuilder.Entity("Aurora.Insurance.Server.Entity.Domain.Models.Entities.Agent", b =>
                {
                    b.HasBaseType("Aurora.Insurance.Server.Entity.Domain.Models.Entities.Contact");

                    b.Property<bool>("IsBroker")
                        .HasColumnType("bit");

                    b.ToTable("Agent");
                });

            modelBuilder.Entity("Aurora.Insurance.Server.Entity.Domain.Models.Entities.Customer", b =>
                {
                    b.HasBaseType("Aurora.Insurance.Server.Entity.Domain.Models.Entities.Contact");

                    b.Property<Guid>("AgentId")
                        .HasColumnType("uniqueidentifier");

                    b.HasIndex("AgentId");

                    b.ToTable("Customer");
                });

            modelBuilder.Entity("Aurora.Insurance.Server.Entity.Domain.Models.Entities.Address", b =>
                {
                    b.HasOne("Aurora.Insurance.Server.Entity.Domain.Models.Entities.Contact", "Contact")
                        .WithOne("Address")
                        .HasForeignKey("Aurora.Insurance.Server.Entity.Domain.Models.Entities.Address", "ContactId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contact");
                });

            modelBuilder.Entity("Aurora.Insurance.Server.Entity.Domain.Models.Entities.Contact", b =>
                {
                    b.HasOne("Aurora.Insurance.Server.Entity.Domain.Models.Entities.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("Aurora.Insurance.Server.Entity.Domain.Models.Entities.Phone", b =>
                {
                    b.HasOne("Aurora.Insurance.Server.Entity.Domain.Models.Entities.Contact", "Contact")
                        .WithMany("Phones")
                        .HasForeignKey("ContactId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contact");
                });

            modelBuilder.Entity("Aurora.Insurance.Server.Entity.Domain.Models.Entities.Agent", b =>
                {
                    b.HasOne("Aurora.Insurance.Server.Entity.Domain.Models.Entities.Organization", null)
                        .WithOne("Broker")
                        .HasForeignKey("Aurora.Insurance.Server.Entity.Domain.Models.Entities.Agent", "ContactId")
                        .HasPrincipalKey("Aurora.Insurance.Server.Entity.Domain.Models.Entities.Organization", "BrokerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Aurora.Insurance.Server.Entity.Domain.Models.Entities.Agent", null)
                        .WithMany("Agents")
                        .HasForeignKey("ContactId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("Aurora.Insurance.Server.Entity.Domain.Models.Entities.Customer", b =>
                {
                    b.HasOne("Aurora.Insurance.Server.Entity.Domain.Models.Entities.Agent", "Agent")
                        .WithMany()
                        .HasForeignKey("AgentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Aurora.Insurance.Server.Entity.Domain.Models.Entities.Contact", null)
                        .WithOne()
                        .HasForeignKey("Aurora.Insurance.Server.Entity.Domain.Models.Entities.Customer", "ContactId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("Aurora.Insurance.Server.Entity.Domain.Models.Entities.DrivingLicence", "DrivingLicence")
                        .WithOne("Customer")
                        .HasForeignKey("Aurora.Insurance.Server.Entity.Domain.Models.Entities.Customer", "ContactId")
                        .HasPrincipalKey("Aurora.Insurance.Server.Entity.Domain.Models.Entities.DrivingLicence", "ContactId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Agent");

                    b.Navigation("DrivingLicence");
                });

            modelBuilder.Entity("Aurora.Insurance.Server.Entity.Domain.Models.Entities.Contact", b =>
                {
                    b.Navigation("Address");

                    b.Navigation("Phones");
                });

            modelBuilder.Entity("Aurora.Insurance.Server.Entity.Domain.Models.Entities.DrivingLicence", b =>
                {
                    b.Navigation("Customer")
                        .IsRequired();
                });

            modelBuilder.Entity("Aurora.Insurance.Server.Entity.Domain.Models.Entities.Organization", b =>
                {
                    b.Navigation("Broker")
                        .IsRequired();
                });

            modelBuilder.Entity("Aurora.Insurance.Server.Entity.Domain.Models.Entities.Agent", b =>
                {
                    b.Navigation("Agents");
                });
#pragma warning restore 612, 618
        }
    }
}
