@page "/customers/new"
@page "/customers/{personId}"

@inject HttpClient Http
@inject NavigationManager NavigationManager
@using System.IO;


<h3>@Title</h3>

<EditForm Model="@Customer"
          OnValidSubmit="@UpsertRecord">
    <div class="section">
        <div class="form-row col">
            <div class="form-group col-2">
                <label>
                    ID
                </label>
                <div>
                    <InputNumber @bind-Value="Customer.Id" class="form-control" readonly />
                </div>
            </div>
        </div>
        <div class="form-row col">
            <div class="form-group col-4">
                <label>
                    First name
                </label>
                <div>
                    <InputText @bind-Value="Customer.FirstName" class="form-control" />
                </div>
            </div>
            <div class="form-group col-4">
                <label>
                    Last name *
                </label>
                <div>
                    <InputText @bind-Value="Customer.LastName" class="form-control" />
                </div>
            </div>
            <div class="form-group col-4">
                <label>
                    Fathes's name
                </label>
                <div>
                    <InputText @bind-Value="Customer.FatherName" class="form-control" />
                </div>
            </div>
        </div>
        <div class="form-row col">
            <div class="form-group col-6">
                <label>
                    Date of birth
                </label>
                <div>
                    <InputDate @bind-Value="Customer.BirthDate" class="form-control" />
                </div>
            </div>
            <div class="form-group col-6">
                <label>
                    Tax Id
                </label>
                <div>
                    <InputText @bind-Value="Customer.TaxId" class="form-control" />
                </div>
            </div>
        </div>
    </div>
    <div class="section">
        <div class="form-group col">
            <label>
                Address
            </label>
            <div>
                <InputTextArea @bind-Value="Customer.Address" rows="3" class="form-control" />
            </div>
        </div>
        <div class="form-group col">
            <label>
                Email Address
            </label>
            <div>
                <InputText @bind-Value="Customer.EmailAddress" class="form-control" />
            </div>
        </div>
    </div>
    <div class="section">
        <h4>Phones</h4>
        <div class="form-group">
            <label>
                Phones
            </label>
        </div>
    </div>
    <div class="float-right">
        <button type="submit" class="btn btn-primary">Save</button>
        <button type="button" class="btn btn-light" @onclick="NavigateBack">Cancel</button>
    </div>
</EditForm>


@code { [Parameter]
    public int? PersonId { get; set; }
    private EFModel.Person Customer = new EFModel.Person();
    private bool CreateMode => PersonId == null;
    private string Title => CreateMode ? "New Customer" : $"Edit {Customer.LastName}";
    //private string Base64Logo => $"data:image/png;base64,{Customer.LogoData}";

    protected override async Task OnInitializedAsync()
    {
        if (PersonId == null)
        {
            Customer = new EFModel.Person();
            return;
        }
        else
        {
            Customer = await Http.GetFromJsonAsync<Aurora.Insurance.EFModel.Person>($"api/persons/{PersonId}");
        }
    }

    private async Task UpsertRecord()
    {
        HttpResponseMessage httpResponseMessage;
        if (CreateMode)
        {
            httpResponseMessage = await Http.PostAsJsonAsync("api/persons", Customer);

        }
        else
        {
            httpResponseMessage = await Http.PutAsJsonAsync($"api/persons/{Customer.Id}", Customer);
        }
        NavigateBack();

    }


    private void NavigateBack()
    {
        NavigationManager.NavigateTo("/customers/list");
    }

    private async Task HandleFileSelected(IFileListEntry[] files)
    {
        var file = files.First();
        using (var memStream = new System.IO.MemoryStream())
        {
            await file.Data.CopyToAsync(memStream);
            memStream.Seek(0, SeekOrigin.Begin);
            //Customer.LogoData = Convert.ToBase64String(memStream.ToArray());
            StateHasChanged();
        }
    } }

