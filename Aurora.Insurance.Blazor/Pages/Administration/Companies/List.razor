@page "/administration/companies/list"
@using Aurora.Insurance.EFModel
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject IJSRuntime JsRuntime
<h1>Insurance companies</h1>

<ModalDialog @ref="modal" @key="TargetCompanyToEdit" >
    <Title>Confirm company deletion</Title>
    <Body>
        <p>Do you want to delete the company <b>@TargetCompanyToEdit.Description</b></p>
    </Body>
    <Footer>
        <button type="button" class="btn btn-danger" @onclick="DeleteCompany">Delete</button>
        <button type="button" class="btn btn-light" data-dismiss="modal" @onclick="() => modal.Close()">Close</button>
    </Footer>
</ModalDialog>

<p>This component demonstrates fetching data from the server.</p>
<button class="btn btn-primary" @onclick="AddCompany">
    Add
</button>

@if (CompanyList == null)
{
<p>
    <em>Loading...</em>
</p> }
else
{
<table class="table">
    <thead>
        <tr>
            <th>Id</th>
            <th>Description</th>
            <th>Modified</th>
            <th>Actions</th>
        </tr>
    </thead>
    <tbody>
        @foreach (Company company in CompanyList)
        {
            Company currentCompany = company;
            /*
                Because currently blazor doesn't support concatenation of strings inside the values of attributes
                passed to components, we use a variable instead
                https://github.com/dotnet/aspnetcore/issues/9854
                */
            var itemRef = $"/administration/companies/{currentCompany.Id}";
<tr>
    <td>
        <NavLink href="@itemRef">
            @company.Id
        </NavLink>
    </td>
    <td>@company.Description</td>
    <td>@company.ModifiedOn.GetValueOrDefault().ToShortDateString()</td>
    <td>
        <a class="fas fa-trash"
           onmouseover=""
           style="cursor: pointer"
           @onclick="@(() => DeleteCurrentCompany(currentCompany.Id))">
        </a>
    </td>
</tr>
}
    </tbody>
</table>}

@code { 
    private Company[]? CompanyList;

    private ModalDialog modal;
    private Company TargetCompanyToEdit { get; set; } = new Company();

    protected override async Task OnInitializedAsync()
    {
        CompanyList = await Http.GetFromJsonAsync<Company[]>("api/companies");
    }

    private void AddCompany()
    {
        NavigationManager.NavigateTo("/administration/companies");
    }

    async Task DeleteCompany()
    {

        await Http.DeleteAsync($"api/companies/{TargetCompanyToEdit.Id}");
        await OnInitializedAsync();
    }

    private void DeleteCurrentCompany(string companyId)
    {
        TargetCompanyToEdit = CompanyList.First(x => x.Id == companyId);
        modal.Open();
    }

}