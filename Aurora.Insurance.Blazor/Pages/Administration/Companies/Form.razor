@page "/administration/companies"
@page "/administration/companies/{companyId}"
@using Aurora.Insurance.EFModel
@using System.IO
@inject HttpClient Http
@inject NavigationManager NavigationManager

<h3>@Title</h3>
<EditForm Model="@CompanyToEdit"
          OnValidSubmit="@UpsertRecord">
    <FluentValidator></FluentValidator>
    <div class="section">


        <div class="form-group col-2">
            <label>
                Code*
            </label>
            <div>
                <InputText @bind-Value="CompanyToEdit.Id" class="form-control" readonly="@(!CreateMode)"/>
                <ValidationMessage For="() => CompanyToEdit.Id"></ValidationMessage>
            </div>
        </div>
        <div class="form-group col">
            <label>
                Description*
            </label>
            <div>
                <InputText @bind-Value="CompanyToEdit.Description" class="form-control"/>
                <ValidationMessage For="() => CompanyToEdit.Description"></ValidationMessage>
            </div>
        </div>
        <div class="form-group col">
            <div class="row col">
                <div>
                    <InputCheckbox @bind-Value="CompanyToEdit.IsActive"/>
                </div>
                <label class="col-auto">
                    Active
                </label>
            </div>

        </div>
        <div class="form-group col">
            <label>
                Logo
            </label>
            <div class="form-row">
                <div class="col-2">
                    <img class="round-border" src="@Base64Logo"/>
                </div>
                <div>
                    <InputFile OnChange="HandleFileSelected"/>
                </div>
            </div>
        </div>
    </div>
    <div class="float-right">
        <button type="submit" class="btn btn-primary">Save</button>
        <button type="button" class="btn btn-light" @onclick="NavigateBack">Cancel</button>
    </div>
</EditForm>

@code {

    [Parameter]
    public string? CompanyId { get; set; }

    private Company CompanyToEdit = new Company();
    private bool CreateMode => CompanyId == null;
    private string Title => CreateMode ? "New Company" : $"Edit {CompanyToEdit.Description}";
    private string Base64Logo => $"data:image/png;base64,{CompanyToEdit.LogoData}";

    protected override async Task OnInitializedAsync()
    {
        if (CompanyId == null)
        {
            CompanyToEdit = new Company();
        }
        else
        {
            CompanyToEdit = await Http.GetFromJsonAsync<Company>($"api/companies/{CompanyId}");
        }
    }

    private async Task UpsertRecord()
    {
        HttpResponseMessage httpResponseMessage;
        if (CreateMode)
        {
            httpResponseMessage = await Http.PostAsJsonAsync("api/companies", CompanyToEdit);
        }
        else
        {
            httpResponseMessage = await Http.PutAsJsonAsync($"api/companies/{CompanyToEdit.Id}", CompanyToEdit);
        }
        NavigateBack();
    }


    private void NavigateBack()
    {
        NavigationManager.NavigateTo("/administration/companies/list");
    }

    private async Task HandleFileSelected(IFileListEntry[] files)
    {
        IFileListEntry? file = files.First();
        using (var memStream = new MemoryStream())
        {
            await file.Data.CopyToAsync(memStream);
            memStream.Seek(0, SeekOrigin.Begin);
            CompanyToEdit.LogoData = Convert.ToBase64String(memStream.ToArray());
            StateHasChanged();
        }
    }

}