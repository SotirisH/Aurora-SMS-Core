@using Aurora.Insurance.EFModel
@using System.Net.Http.Headers
@inject HttpClient Http

<div class="container">
    <div class="row">
        <div class="col-lg">
            <h3>Attachments</h3>
        </div>
        <div class="col-lg-auto">
            <label for="upload-attachement" class="btn btn-primary">
                Add
            </label>
            <InputFile OnChange="HandleFileSelected" name="upload-attachement" id="upload-attachement" @attributes="InputAttributes"/>
        </div>
    </div>
</div>

@if (AttachmentsList == null)
{
    <div class="d-flex justify-content-center">
        <div class="spinner-border text-primary" role="status">
            <span class="sr-only">Loading...</span>
        </div>
    </div>
}
else
{
    <div style=" height: auto;
        max-height: 150%;
        overflow: auto;">
        <table class="table">
            <thead>
            <tr>
                <th>Title</th>
                <th>Type</th>
                <th>Actions</th>
            </tr>
            </thead>
            <tbody>

            @foreach (Attachment attachment in AttachmentsList)
            {
                Attachment currentAttachment = attachment;
                <tr>
                    <td>
                        <a href="@currentAttachment.Url" target="_blank">@currentAttachment.Title</a>
                    </td>
                    <td>@currentAttachment.Type</td>

                    <td>
                        <i class="fas fa-trash"
                           style="cursor: pointer"
                           @onclick=@(() => ConfirmDelete(currentAttachment.AttachmentId))>
                        </i>
                    </td>
                </tr>
            }
            </tbody>
        </table>
    </div>
}

@code {

    public Dictionary<string, object> InputAttributes { get; set; } =
        new Dictionary<string, object>
        {
            {"class", "hide"}
        };

    private Attachment[]? AttachmentsList = default!;

    protected override async Task OnInitializedAsync()
    {
        await LoadAttachments();
    }

    private async Task LoadAttachments()
    {
        AttachmentsList = await Http.GetFromJsonAsync<Attachment[]>("api/persons/1/attachments");
    }

    void ConfirmDelete(Guid AttachmentId)
    {
    }

    private async Task HandleFileSelected(IFileListEntry[] files)
    {
        IFileListEntry? file = files.First();
        var fileContent = new StreamContent(file.Data)
        {
            Headers =
            {
                ContentLength = file.Size,
                ContentType = new MediaTypeHeaderValue(file.Type)
            }
        };

        var formDataContent = new MultipartFormDataContent();
        formDataContent.Add(fileContent, "file", file.Name); // file
        formDataContent.Add(new StringContent("type"), "Generic"); // form input

        HttpResponseMessage? result = await Http.PostAsync($"api/persons/1/attachments/{file.Name}", formDataContent);
        if (result.IsSuccessStatusCode)
        {
            AttachmentsList = null;
            StateHasChanged();
            await LoadAttachments();
        }
    }

}
